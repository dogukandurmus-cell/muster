name: Build Android APK

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
      PROJECT_DIR: .   # proje alt klasördeyse burayı klasör adı yap (ör. ziyaret-apk-ready)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace
        run: |
          echo "Repo içeriği:"; ls -la
          echo "Proje klasörü: $PROJECT_DIR"
          if [ -d "$PROJECT_DIR" ]; then echo "Proje klasörü içeriği:"; ls -la "$PROJECT_DIR"; fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm install
          npm install -D vite @vitejs/plugin-react typescript tailwindcss postcss autoprefixer
          npm install react react-dom dexie

      - name: Build web
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm run build

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install SDKs
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Install Capacitor & Android project
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          npm install @capacitor/core @capacitor/android
          npm install -D @capacitor/cli
          APP_NAME="MusteriZiyaret"
          APP_ID="com.sirket.ziyaret"
          npx cap init "$APP_NAME" "$APP_ID" --web-dir=dist --npm-client npm --yes || true
          npx cap add android || true
          npx cap sync android

      - name: Patch gradle.properties & SDK versions
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          PROP="android/gradle.properties"
          touch "$PROP"
          grep -q '^android.useAndroidX=true$' "$PROP" || printf '%s\n' 'android.useAndroidX=true' >> "$PROP"
          grep -q '^android.enableJetifier=true$' "$PROP" || printf '%s\n' 'android.enableJetifier=true' >> "$PROP"
          grep -q '^org.gradle.jvmargs=' "$PROP" || printf '%s\n' 'org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8' >> "$PROP"
          printf 'sdk.dir=%s\n' "$ANDROID_SDK_ROOT" > android/local.properties
          VARS="android/variables.gradle"
          if [ -f "$VARS" ]; then
            sed -i -E 's/compileSdkVersion[[:space:]]*=[[:space:]]*[0-9]+/compileSdkVersion = 34/' "$VARS" || true
            sed -i -E 's/targetSdkVersion[[:space:]]*=[[:space:]]*[0-9]+/targetSdkVersion = 34/' "$VARS" || true
            sed -i -E 's/minSdkVersion[[:space:]]*=[[:space:]]*[0-9]+/minSdkVersion = 24/' "$VARS" || true
          fi

            - name: Force Java 17 toolchain (fix invalid source release 21)
        working-directory: ${{ env.PROJECT_DIR }}/android
        shell: bash
        run: |
          set -euo pipefail

          # Tüm ilgili dosyalar: build.gradle(.kts) + gradle.properties
          mapfile -d '' FILES < <(find . -type f \( -name "build.gradle" -o -name "build.gradle.kts" -o -name "gradle.properties" \) -print0)

          for f in "${FILES[@]}"; do
            # JavaVersion.VERSION_21 / VERSION_20 -> VERSION_17
            sed -i -E 's/JavaVersion\.VERSION_2[01]/JavaVersion.VERSION_17/g' "$f" || true

            # sourceCompatibility / targetCompatibility 21|20 -> 17
            sed -i -E 's/\bsourceCompatibility\b[[:space:]]*[:=][[:space:]]*(JavaVersion\.VERSION_2[01]|2[01])/sourceCompatibility = JavaVersion.VERSION_17/g' "$f" || true
            sed -i -E 's/\btargetCompatibility\b[[:space:]]*[:=][[:space:]]*(JavaVersion\.VERSION_2[01]|2[01])/targetCompatibility = JavaVersion.VERSION_17/g' "$f" || true

            # Kotlin jvmTarget "21"|"20" -> "17"
            sed -i -E 's/\bjvmTarget\b[[:space:]]*[:=][[:space:]]*"?2[01]"?/jvmTarget = "17"/g' "$f" || true

            # Java toolchain: JavaLanguageVersion.of(21|20) -> of(17)
            sed -i -E 's/JavaLanguageVersion\.of\([[:space:]]*2[01][[:space:]]*\)/JavaLanguageVersion.of(17)/g' "$f" || true
            sed -i -E 's/languageVersion[[:space:]]*=[[:space:]]*JavaLanguageVersion\.of\([[:space:]]*2[01][[:space:]]*\)/languageVersion = JavaLanguageVersion.of(17)/g' "$f" || true

            # Derleyici bayrakları: --release 21|20 -> --release 17
            sed -i -E 's/--release[[:space:]]+2[01]/--release 17/g' "$f" || true

            # Diğer olası özel sabitler
            sed -i -E 's/\bTARGET_JAVA_VERSION\b[[:space:]]*=[[:space:]]*2[01]/TARGET_JAVA_VERSION = 17/g' "$f" || true
            sed -i -E 's/\bjavaVersion\b[[:space:]]*=[[:space:]]*2[01]/javaVersion = 17/g' "$f" || true
          done

          echo "=== Java sürümü ile ilgili kalan 21 izleri (beklenmemeli) ==="
          grep -RIn --include='*gradle*' --include='gradle.properties' -E 'VERSION_21|JavaLanguageVersion\.of\(21\)|--release 21|[=:] *21' . || true

      - name: Make gradlew executable
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f android/gradlew ]; then chmod +x android/gradlew; fi

      - name: Build Debug APK (with full log)
        working-directory: ${{ env.PROJECT_DIR }}/android
        shell: bash
        run: |
          set -o pipefail
          ./gradlew --no-daemon --stacktrace --warning-mode all assembleDebug | tee gradle-build.log

      - name: Show APK paths
        shell: bash
        run: |
          echo "Looking for APKs under $PROJECT_DIR/android"
          find "${{ env.PROJECT_DIR }}/android" -type f \( -name "*.apk" -o -name "*.aab" \) -print || true

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            ${{ env.PROJECT_DIR }}/android/app/build/outputs/**/*.apk
            ${{ env.PROJECT_DIR }}/android/**/outputs/**/*.apk
          if-no-files-found: error

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: ${{ env.PROJECT_DIR }}/android/gradle-build.log
